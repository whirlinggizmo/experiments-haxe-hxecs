
-D HXCPP_SILENT
-D analyzer-optimize
--dce full

#-D HXCPP_VERBOSE
#-D HXCPP_DEBUG_LINK
#--debug
#--verbose
# vscode debugger
#-lib hxcpp-debug-server
#--dce no

-D HXCPP_M64
-D HXCPP_CATCH_SEGV
-D hxcpp_smart_strings

-lib hxcore
-cp src
-cp lib

--each

--cmd echo "ScriptTest: Building..."
--next

# generate the list of all script files
#--cmd echo -n "Building scripts list... "
#--next
#--macro core.macros.ScriptCompiler.generateScriptsList('scripts', 'gen/scripts.hxml')
#--cmd echo "OK"
#--next

--define HAXE_OUTPUT_FILE=ScriptTest
--main ScriptTest
-cpp out/script_test

# enable cppia
-D scriptable 


# include the scripts as part of the build
#-cp scripts
#gen/scripts.hxml
#Test
#Main
--next

# move the generated export_classes.info to the script source directory
--cmd mkdir -p scripts
--cmd mv export_classes.info scripts/export_classes.info

# copy the executable to the dist directory
--cmd mkdir -p dist
--cmd pkill -9 ScriptTest || true
--cmd cp out/script_test/ScriptTest dist/ScriptTest

# create a scripts directory, in case it doesn't exist
--cmd mkdir -p dist/scripts
--next


# compile the Test script
# We could also call "compile.script.hxml Test" from this hxml, but that sends *everything* after the call to the hxml as args to ScriptCompiler (including --next, --cmd, etc)
# Instead, we'll invoke the macro directly.
# BTW:  From the command line, you can rebuild the script with "haxe build.script.hxml Test", in case you don't have the hot-compile feature enabled.
#
--cmd echo "ScriptTest: Compiling Main script..."
--next
--macro hxcore.scripting.ScriptCompiler.compileScript('.', 'scripts', 'dist/scripts', 'cppia', ["-cp", "lib"], 'Main')
--next

--cmd echo "ScriptTest: Compiling Test script..."
--next
--macro hxcore.scripting.ScriptCompiler.compileScript('.', 'scripts', 'dist/scripts', 'cppia', ["-cp", "lib"], 'Test')
--next

--cmd echo ""
--cmd echo "ScriptTest: Build complete."

